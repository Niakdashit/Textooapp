// CORRECTION IMM√âDIATE OUTLOOK - Script √† ex√©cuter dans la console
(function() {
  console.log('=== CORRECTION IMM√âDIATE OUTLOOK ===');
  
  // V√©rifier si on est sur Outlook
  const isOutlook = typeof location !== 'undefined' && /outlook\.(live|office)\.com$/.test(location.hostname);
  console.log('Site d√©tect√©:', window.location.hostname);
  console.log('Est Outlook:', isOutlook);
  
  if (!isOutlook) {
    console.log('‚ùå Ce script est destin√© √† Outlook uniquement');
    return;
  }
  
  // Fonction pour trouver le message de formation sur la page
  function findFormationMessage() {
    console.log('\n=== RECHERCHE DU MESSAGE DE FORMATION ===');
    
    // Analyser TOUS les √©l√©ments de la page
    const allElements = document.querySelectorAll('*');
    console.log(`Analyse de ${allElements.length} √©l√©ments sur la page...`);
    
    let bestCandidate = '';
    let bestScore = 0;
    let bestElement = null;
    
    for (let i = 0; i < allElements.length; i++) {
      const element = allElements[i];
      const text = element.innerText || element.textContent || '';
      
      if (text && text.trim().length > 50 && text.trim().length < 2000) {
        const lowerText = text.toLowerCase();
        
        // Calculer un score bas√© sur les mots-cl√©s de formation
        let score = 0;
        
        // Mots-cl√©s sp√©cifiques aux formations
        if (lowerText.includes('formation')) score += 5;
        if (lowerText.includes('planning')) score += 5;
        if (lowerText.includes('session')) score += 3;
        if (lowerText.includes('octobre')) score += 3;
        if (lowerText.includes('confirmer')) score += 3;
        if (lowerText.includes('pr√©sence')) score += 3;
        if (lowerText.includes('calendrier')) score += 2;
        if (lowerText.includes('pi√®ce jointe')) score += 2;
        if (lowerText.includes('ajust√©')) score += 2;
        if (lowerText.includes('d√©plac√©e')) score += 2;
        if (lowerText.includes('am√©lie')) score += 1;
        if (lowerText.includes('bonjour')) score += 1;
        if (lowerText.includes('merci')) score += 1;
        
        // P√©naliser les m√©tadonn√©es
        if (lowerText.match(/^(mer|mar|jeu|ven|sam|dim|lun)/i)) score -= 10;
        if (lowerText.match(/^\d{1,2}:\d{2}/)) score -= 10;
        if (lowerText.match(/^\d{1,2}\/\d{1,2}\/\d{4}/)) score -= 10;
        if (lowerText.split('\n').length > 30) score -= 5;
        
        if (score > bestScore) {
          bestScore = score;
          bestCandidate = text.trim();
          bestElement = element;
          console.log(`Nouveau meilleur candidat (score: ${score}): "${text.substring(0, 100)}..."`);
        }
      }
    }
    
    if (bestCandidate && bestScore > 0) {
      console.log(`‚úÖ MESSAGE DE FORMATION TROUV√â avec score ${bestScore}:`);
      console.log(`Contenu: "${bestCandidate}"`);
      console.log(`√âl√©ment:`, bestElement);
      return bestCandidate;
    } else {
      console.log('‚ùå Aucun message de formation trouv√©');
      return '';
    }
  }
  
  // Fonction pour g√©n√©rer la bonne r√©ponse
  function generateCorrectResponse(message) {
    console.log('\n=== G√âN√âRATION DE LA BONNE R√âPONSE ===');
    console.log('Message analys√©:', message);
    
    if (!message) {
      console.log('‚ùå Aucun message √† analyser');
      return '';
    }
    
    const lowerText = message.toLowerCase();
    
    // Analyser les mots-cl√©s sp√©cifiques
    const keywords = {
      'formation': lowerText.includes('formation'),
      'planning': lowerText.includes('planning'),
      'session': lowerText.includes('session'),
      'octobre': lowerText.includes('octobre'),
      'confirmer': lowerText.includes('confirmer'),
      'pr√©sence': lowerText.includes('pr√©sence'),
      'calendrier': lowerText.includes('calendrier'),
      'pi√®ce jointe': lowerText.includes('pi√®ce jointe'),
      'ajust√©': lowerText.includes('ajust√©'),
      'd√©plac√©e': lowerText.includes('d√©plac√©e'),
      'am√©lie': lowerText.includes('am√©lie')
    };
    
    console.log('Mots-cl√©s d√©tect√©s:', keywords);
    
    // D√©terminer le type de r√©ponse
    let responseType = 'generic';
    if (lowerText.includes('formation') && lowerText.includes('planning')) {
      responseType = 'training_schedule';
    } else if (lowerText.includes('confirmer') && lowerText.includes('pr√©sence')) {
      responseType = 'attendance_confirmation';
    } else if (lowerText.includes('session') && lowerText.includes('octobre')) {
      responseType = 'session_reschedule';
    }
    
    console.log('Type de r√©ponse d√©tect√©:', responseType);
    
    // G√©n√©rer la r√©ponse appropri√©e
    let response = '';
    switch(responseType) {
      case 'training_schedule':
        if (lowerText.includes('confirmer') && lowerText.includes('pr√©sence')) {
          response = "Bonjour,\n\nMerci pour cette information concernant le planning de formation. Je confirme ma pr√©sence √† la session du 5 octobre √† 10h.\n\nCordialement,\nNOM Pr√©nom";
        } else {
          response = "Bonjour,\n\nMerci pour cette information concernant le planning de formation. Je confirme avoir bien pris note du changement de date (5 octobre √† 10h).\n\nCordialement,\nNOM Pr√©nom";
        }
        break;
      case 'attendance_confirmation':
        response = "Bonjour,\n\nMerci pour cette information. Je confirme ma pr√©sence √† la session du 5 octobre √† 10h.\n\nCordialement,\nNOM Pr√©nom";
        break;
      case 'session_reschedule':
        response = "Bonjour,\n\nMerci pour cette information. Je confirme avoir bien pris note du changement de date pour la session.\n\nCordialement,\nNOM Pr√©nom";
        break;
      default:
        response = "Bonjour,\n\nMerci pour votre message. Je suis ravi d'avoir de vos nouvelles. Pourriez-vous me donner plus de d√©tails sur le sujet que vous souhaitez aborder ? Cela m'aiderait √† mieux pr√©parer notre √©change.\n\nCordialement,\nNOM Pr√©nom";
    }
    
    console.log('R√©ponse g√©n√©r√©e:', response);
    
    // V√©rifier si la r√©ponse est appropri√©e
    if (response && (response.includes('formation') || response.includes('planning') || response.includes('confirme'))) {
      console.log('‚úÖ SUCCESS: La r√©ponse est contextuellement appropri√©e');
    } else {
      console.log('‚ùå ERROR: La r√©ponse ne semble pas appropri√©e au contexte');
    }
    
    return response;
  }
  
  // Fonction pour patcher la fonction getLastMessageText en temps r√©el
  function patchGetLastMessageText() {
    console.log('\n=== PATCH DE getLastMessageText() EN TEMPS R√âEL ===');
    
    // Cr√©er une nouvelle version qui fonctionne
    window.getLastMessageText = function() {
      console.log('=== NOUVELLE VERSION DE getLastMessageText() ===');
      
      const isOutlook = typeof location !== 'undefined' && /outlook\.(live|office)\.com$/.test(location.hostname);
      
      if (isOutlook) {
        console.log('Recherche du contenu de message Outlook...');
        
        // Utiliser notre fonction de recherche am√©lior√©e
        const message = findFormationMessage();
        
        if (message) {
          console.log(`‚úÖ Message trouv√©: "${message}"`);
          return message;
        } else {
          console.log('‚ùå Aucun message trouv√©');
          return '';
        }
      }
      
      return '';
    };
    
    console.log('‚úÖ Fonction getLastMessageText() patch√©e en temps r√©el');
  }
  
  // Fonction pour patcher la fonction handleDirectQuickReply
  function patchHandleDirectQuickReply() {
    console.log('\n=== PATCH DE handleDirectQuickReply() ===');
    
    // Cr√©er une nouvelle version qui fonctionne
    window.handleDirectQuickReply = function() {
      console.log('=== NOUVELLE VERSION DE handleDirectQuickReply() ===');
      
      // R√©cup√©rer le message avec notre fonction am√©lior√©e
      const message = findFormationMessage();
      
      if (message) {
        console.log('Message r√©cup√©r√©:', message);
        
        // G√©n√©rer la r√©ponse appropri√©e
        const response = generateCorrectResponse(message);
        
        if (response) {
          console.log('R√©ponse g√©n√©r√©e:', response);
          return response;
        }
      }
      
      console.log('‚ùå Impossible de g√©n√©rer une r√©ponse appropri√©e');
      return '';
    };
    
    console.log('‚úÖ Fonction handleDirectQuickReply() patch√©e');
  }
  
  // Ex√©cuter la solution compl√®te
  function runCompleteSolution() {
    console.log('=== D√âBUT DE LA SOLUTION COMPL√àTE ===');
    
    // 1. Trouver le message de formation
    const message = findFormationMessage();
    
    if (message) {
      // 2. G√©n√©rer la bonne r√©ponse
      const response = generateCorrectResponse(message);
      
      // 3. Patcher les fonctions
      patchGetLastMessageText();
      patchHandleDirectQuickReply();
      
      console.log('\n=== R√âSULTAT DE LA SOLUTION ===');
      console.log('Message trouv√©:', message ? 'OUI' : 'NON');
      console.log('R√©ponse g√©n√©r√©e:', response ? 'OUI' : 'NON');
      console.log('Fonctions patch√©es:', 'OUI');
      
      if (response && (response.includes('formation') || response.includes('planning') || response.includes('confirme'))) {
        console.log('‚úÖ SUCCESS: La solution fonctionne parfaitement');
        console.log('‚úÖ Le message de formation est d√©tect√©');
        console.log('‚úÖ La r√©ponse appropri√©e est g√©n√©r√©e');
        console.log('‚úÖ Les fonctions sont patch√©es');
        
        console.log('\nüéØ R√âPONSE ATTENDUE:');
        console.log(`"${response}"`);
        
        console.log('\nüí° INSTRUCTIONS:');
        console.log('1. Les fonctions ont √©t√© patch√©es en temps r√©el');
        console.log('2. Testez maintenant le bouton "r√©ponse rapide"');
        console.log('3. La r√©ponse devrait maintenant √™tre appropri√©e au contexte');
      } else {
        console.log('‚ùå ERROR: La solution ne fonctionne pas');
      }
    } else {
      console.log('‚ùå SOLUTION √âCHOU√âE: Aucun message de formation trouv√©');
      console.log('üí° Conseil: V√©rifiez que vous avez un message de formation ouvert dans Outlook');
    }
    
    console.log('=== FIN DE LA SOLUTION COMPL√àTE ===');
  }
  
  // Exposer les fonctions globalement
  window.findFormationMessage = findFormationMessage;
  window.generateCorrectResponse = generateCorrectResponse;
  window.patchGetLastMessageText = patchGetLastMessageText;
  window.patchHandleDirectQuickReply = patchHandleDirectQuickReply;
  window.runCompleteSolution = runCompleteSolution;
  
  // Ex√©cuter automatiquement la solution
  runCompleteSolution();
})();

